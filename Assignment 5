Q1

function movex(arr,i) {
    if (i >= arr.length)
        return;
    let curr = arr[i];
    if(curr!= 'x')      
    console.log(curr);
    movex(arr,i+1,arr.length)
    if (curr == 'x')
        console.log(curr);
}
let arr = 'abexexed';
movex(arr,0,arr.length) 

Q2

  
function ratInMaze(row, col, arr = [], str = ""){
    if(row == 0 && col == 0){
        arr.push(str);
        return;
    }
    if(col< 0 || row < 0){
        return;
    }
    ratInMaze(row - 1, col, arr, str + 'v');
    ratInMaze(row, col - 1, arr, str + 'h');
    return arr;
}
let res = ratInMaze(2,2);
console.log(res);

Q3

function CheesePath (row,col,arr=[]){
    if(row<0||col<0){
        return
    }
    if(row==0&&col==0){
        console.log(arr)
        return
    }
    arr.push("H")
    let HorizontalPath = CheesePath(row-1,col,arr)
    arr.pop()
    arr.push("V")
    let VerticalPath = CheesePath(row,col-1,arr)
    arr.pop()
    arr.push("D")
    let DiagonalPath = CheesePath(row-1,col-1,arr)
    arr.pop()
}
CheesePath(2,2)

Q4

let input = [
    ["O", "X", "O", "O"],
    ["O", "O", "O", "X"],
    ["X", "O", "X", "O"],
    ["X", "O", "O", "O"],
    ["X", "X", "O", "O"],
  ];
  let N = input.length;
  let M = input[0].length;
  let visited = new Array(N).fill().map(() => new Array(M).fill(0));
  visited[0][0] = 1;
  let answer = false;
  function solution(input, visited, Down, Right, n, m) {
    if (Down === n - 1 && Right === m - 1 && answer === false) {
      console.log(visited);
      answer = true;
      return;
    }
    if (Right + 1 <= m - 1 && visited[Down][Right + 1] === 0 && input[Down][Right + 1] === "O") {
      visited[Down][Right + 1] = 1;
      solution(input, visited, Down, Right + 1, n, m);
      visited[Down][Right + 1] = 0;
    }
    if (Down + 1 <= n - 1 && visited[Down + 1][Right] === 0 && input[Down + 1][Right] === "O") {
      visited[Down + 1][Right] = 1;
      solution(input, visited, Down + 1, Right, n, m);
      visited[Down + 1][Right] = 0;
    }
    return;
  }
  solution(input, visited, 0, 0, N, M);
  
  Q5
  
  function keypad(str, str2="") {
    if(str.length === 0){
        console.log(str2);
        return;
    }
    //single Digit
    let ele = Number(str[0]);
    let numToCh = String.fromCharCode(96+ele);
    keypad(str.substring(1), str2 + numToCh);
    //double Digit
    let ele2 = Number(str.substring(0,2));
    if(str.length >=2 && ele2 <=26){
        keypad(str.substring(2), str2 + String.fromCharCode(96+ele2))
    }
}
keypad("1123"); 

Q6A

  
function keypad(str, arr, arr2, str2="", ind = 0) {
    if(ind == str.length){
        arr2.push(str2);
        return;
    }

    let ele = parseInt(str[ind]);
    let ch = arr[ele];
    for (const iterator of ch) {
        keypad(str, arr, arr2, str2+iterator, ind+1);
    }
    return arr2.length;
}
let arr = ["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuvw", "xyz"];
let arr2 = [];
let res = keypad("23", arr, arr2);
console.log(res);

Q7A

function permute(orgStr,count, perStr=""){
    if(orgStr===""){
        // console.log(perStr);
        count.push(perStr)
        return;
    }

    let ch = orgStr[0];
    let modStr = orgStr.substring(1); 
    for(let i = 0; i<=perStr.length; i++){
        let leftPart = perStr.substring(0, i)
        let rightPart = perStr.substring(i, perStr.length)
        let newPermute = leftPart+ch+rightPart
        permute(modStr,count, newPermute);
    }
    return count.length
}
let count = []
permute("abc",count);
console.log("Possible No of Permutation: ",count.length)

Q7B

function permutation(str, count = [], i = 0, str2 = ''){
    if(i == str.length){
        count.push(str2);
        return;
    }
    for (let index = 0; index <= str2.length; index++) {
        let leftPart = str2.substring(0, index);
        let rightPart = str2.substring(index, str2.length);
        permutation(str, count, i+1, leftPart+str[i]+rightPart);
    }
    return count;
}
let res = permutation('abc');
console.log(res); 

Q7C

function permutation(str, count = [], i = 0, str2 = ''){
    if(i == str.length){
        console.log(str2);
        return;
    }
    for (let index = 0; index <= str2.length; index++) {
        let leftPart = str2.substring(0, index);
        let rightPart = str2.substring(index, str2.length);
        permutation(str, count, i+1, leftPart+str[i]+rightPart);
    }
}
permutation('abc');

Q8

let count = 0;
function divideArr(arr, leftArr = [], rightArr = [], leftSum = 0, rightSum = 0, i = 0){
    if(i == arr.length){
        if(leftSum == rightSum){
            console.log(leftArr, rightArr);
            count++;
            return;
        }
        return;
    }
    let ele = arr[i];
    leftArr.push(ele);
    divideArr(arr, leftArr, rightArr, leftSum+ele, rightSum, i+1);
    leftArr.pop();
    rightArr.push(ele);
    divideArr(arr, leftArr, rightArr, leftSum, rightSum+ele, i+1);
    rightArr.pop();
}
let arr = [-1, 3, 7, 4, 2, 1];
let res = divideArr(arr);
console.log(`count is: ${count}`);


Q9

function printAllSubsetsRec(arr, n, v, sum) {
    if (sum == 0) {
        for (let x of v)
            console.log(x + " ");
            console.log("\n");
        return;
    }
    printAllSubsetsRec(arr, n - 1, v, sum); 
    v.push(arr[n - 1]);
    printAllSubsetsRec(arr, n - 1, v, sum - arr[n - 1]);
    v.pop();
}
function printAllSubsets(arr, n, sum) {
    let v = [];
    printAllSubsetsRec(arr, n, v, sum);
}

let arr = [2, 5, 8, 4, 6, 11];
let sum = 13;
let n = arr.length;
printAllSubsets(arr, n, sum);
